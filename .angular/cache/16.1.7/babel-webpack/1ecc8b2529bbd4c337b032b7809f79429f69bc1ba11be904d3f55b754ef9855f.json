{"ast":null,"code":"import _defineProperty from \"C:/jpeg/JPEG_algorithm/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, Component, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\nconst _c0 = [\"toast-component\", \"\"];\nfunction Toast_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function Toast_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction Toast_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\nfunction Toast_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, Toast_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\nfunction Toast_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction Toast_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\nfunction Toast_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\nfunction ToastNoAnimation_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ToastNoAnimation_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ToastNoAnimation_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\nfunction ToastNoAnimation_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ToastNoAnimation_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\nfunction ToastNoAnimation_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ToastNoAnimation_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\nfunction ToastNoAnimation_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\nlet ToastContainerDirective = /*#__PURE__*/(() => {\n  class ToastContainerDirective {\n    constructor(el) {\n      _defineProperty(this, \"el\", void 0);\n      this.el = el;\n    }\n    getContainerElement() {\n      return this.el.nativeElement;\n    }\n  }\n  _defineProperty(ToastContainerDirective, \"\\u0275fac\", function ToastContainerDirective_Factory(t) {\n    return new (t || ToastContainerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  });\n  _defineProperty(ToastContainerDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ToastContainerDirective,\n    selectors: [[\"\", \"toastContainer\", \"\"]],\n    exportAs: [\"toastContainer\"],\n    standalone: true\n  }));\n  return ToastContainerDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n  constructor(component, injector) {\n    _defineProperty(this, \"_attachedHost\", void 0);\n    /** The type of the component that will be instantiated for attachment. */\n    _defineProperty(this, \"component\", void 0);\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalHost.\n     * The origin necessary when the host is outside of the Angular application context.\n     */\n    _defineProperty(this, \"viewContainerRef\", void 0);\n    /** Injector used for the instantiation of the component. */\n    _defineProperty(this, \"injector\", void 0);\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n  constructor() {\n    /** The portal currently attached to the host. */\n    _defineProperty(this, \"_attachedPortal\", void 0);\n    /** A function that will permanently dispose this host. */\n    _defineProperty(this, \"_disposeFn\", void 0);\n  }\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n  constructor(_overlayRef) {\n    _defineProperty(this, \"_overlayRef\", void 0);\n    /** The instance of component opened into the toast. */\n    _defineProperty(this, \"componentInstance\", void 0);\n    /** Count of duplicates of this toast */\n    _defineProperty(this, \"duplicatesCount\", 0);\n    /** Subject for notifying the user that the toast has finished closing. */\n    _defineProperty(this, \"_afterClosed\", new Subject());\n    /** triggered when toast is activated */\n    _defineProperty(this, \"_activate\", new Subject());\n    /** notifies the toast that it should close before the timeout */\n    _defineProperty(this, \"_manualClose\", new Subject());\n    /** notifies the toast that it should reset the timeouts */\n    _defineProperty(this, \"_resetTimeout\", new Subject());\n    /** notifies the toast that it should count a duplicate toast */\n    _defineProperty(this, \"_countDuplicate\", new Subject());\n    this._overlayRef = _overlayRef;\n  }\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n  close() {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  isInactive() {\n    return this._activate.isStopped;\n  }\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    _defineProperty(this, \"toastId\", void 0);\n    _defineProperty(this, \"config\", void 0);\n    _defineProperty(this, \"message\", void 0);\n    _defineProperty(this, \"title\", void 0);\n    _defineProperty(this, \"toastType\", void 0);\n    _defineProperty(this, \"toastRef\", void 0);\n    _defineProperty(this, \"_onTap\", new Subject());\n    _defineProperty(this, \"_onAction\", new Subject());\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n  onAction() {\n    return this._onAction.asObservable();\n  }\n}\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing'\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n    _defineProperty(this, \"_hostDomElement\", void 0);\n    _defineProperty(this, \"_componentFactoryResolver\", void 0);\n    _defineProperty(this, \"_appRef\", void 0);\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let componentRef;\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n}\n\n/** Container inside which all toasts will render. */\nlet OverlayContainer = /*#__PURE__*/(() => {\n  class OverlayContainer {\n    constructor() {\n      _defineProperty(this, \"_document\", inject(DOCUMENT));\n      _defineProperty(this, \"_containerElement\", void 0);\n    }\n    ngOnDestroy() {\n      if (this._containerElement && this._containerElement.parentNode) {\n        this._containerElement.parentNode.removeChild(this._containerElement);\n      }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body\n     * and 'aria-live=\"polite\"'\n     */\n    _createContainer() {\n      const container = this._document.createElement('div');\n      container.classList.add('overlay-container');\n      container.setAttribute('aria-live', 'polite');\n      this._document.body.appendChild(container);\n      this._containerElement = container;\n    }\n  }\n  _defineProperty(OverlayContainer, \"\\u0275fac\", function OverlayContainer_Factory(t) {\n    return new (t || OverlayContainer)();\n  });\n  _defineProperty(OverlayContainer, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: OverlayContainer,\n    factory: OverlayContainer.ɵfac,\n    providedIn: 'root'\n  }));\n  return OverlayContainer;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n  constructor(_portalHost) {\n    _defineProperty(this, \"_portalHost\", void 0);\n    this._portalHost = _portalHost;\n  }\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nlet Overlay = /*#__PURE__*/(() => {\n  class Overlay {\n    constructor() {\n      _defineProperty(this, \"_overlayContainer\", inject(OverlayContainer));\n      _defineProperty(this, \"_componentFactoryResolver\", inject(ComponentFactoryResolver));\n      _defineProperty(this, \"_appRef\", inject(ApplicationRef));\n      _defineProperty(this, \"_document\", inject(DOCUMENT));\n      // Namespace panes by overlay container\n      _defineProperty(this, \"_paneElements\", new Map());\n    }\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n      // get existing pane if possible\n      return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n      if (!this._paneElements.get(overlayContainer)) {\n        this._paneElements.set(overlayContainer, {});\n      }\n      if (!this._paneElements.get(overlayContainer)[positionClass]) {\n        this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n      }\n      return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n      const pane = this._document.createElement('div');\n      pane.id = 'toast-container';\n      pane.classList.add(positionClass);\n      pane.classList.add('toast-container');\n      if (!overlayContainer) {\n        this._overlayContainer.getContainerElement().appendChild(pane);\n      } else {\n        overlayContainer.getContainerElement().appendChild(pane);\n      }\n      return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n      return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n      return new OverlayRef(this._createPortalHost(pane));\n    }\n  }\n  _defineProperty(Overlay, \"\\u0275fac\", function Overlay_Factory(t) {\n    return new (t || Overlay)();\n  });\n  _defineProperty(Overlay, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Overlay,\n    factory: Overlay.ɵfac,\n    providedIn: 'root'\n  }));\n  return Overlay;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToastrService = /*#__PURE__*/(() => {\n  class ToastrService {\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n      _defineProperty(this, \"overlay\", void 0);\n      _defineProperty(this, \"_injector\", void 0);\n      _defineProperty(this, \"sanitizer\", void 0);\n      _defineProperty(this, \"ngZone\", void 0);\n      _defineProperty(this, \"toastrConfig\", void 0);\n      _defineProperty(this, \"currentlyActive\", 0);\n      _defineProperty(this, \"toasts\", []);\n      _defineProperty(this, \"overlayContainer\", void 0);\n      _defineProperty(this, \"previousToastMessage\", void 0);\n      _defineProperty(this, \"index\", 0);\n      this.overlay = overlay;\n      this._injector = _injector;\n      this.sanitizer = sanitizer;\n      this.ngZone = ngZone;\n      this.toastrConfig = {\n        ...token.default,\n        ...token.config\n      };\n      if (token.config.iconClasses) {\n        this.toastrConfig.iconClasses = {\n          ...token.default.iconClasses,\n          ...token.config.iconClasses\n        };\n      }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n      const type = this.toastrConfig.iconClasses.success || '';\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n      const type = this.toastrConfig.iconClasses.error || '';\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n      const type = this.toastrConfig.iconClasses.info || '';\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n      const type = this.toastrConfig.iconClasses.warning || '';\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n      // Call every toastRef manualClose function\n      for (const toast of this.toasts) {\n        if (toastId !== undefined) {\n          if (toast.toastId === toastId) {\n            toast.toastRef.manualClose();\n            return;\n          }\n        } else {\n          toast.toastRef.manualClose();\n        }\n      }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n      const found = this._findToast(toastId);\n      if (!found) {\n        return false;\n      }\n      found.activeToast.toastRef.close();\n      this.toasts.splice(found.index, 1);\n      this.currentlyActive = this.currentlyActive - 1;\n      if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n        return false;\n      }\n      if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n        const p = this.toasts[this.currentlyActive].toastRef;\n        if (!p.isInactive()) {\n          this.currentlyActive = this.currentlyActive + 1;\n          p.activate();\n        }\n      }\n      return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n      const {\n        includeTitleDuplicates\n      } = this.toastrConfig;\n      for (const toast of this.toasts) {\n        const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n        if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n          toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n          return toast;\n        }\n      }\n      return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n      return {\n        ...this.toastrConfig,\n        ...override\n      };\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n      for (let i = 0; i < this.toasts.length; i++) {\n        if (this.toasts[i].toastId === toastId) {\n          return {\n            index: i,\n            activeToast: this.toasts[i]\n          };\n        }\n      }\n      return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n      if (config.onActivateTick) {\n        return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n      }\n      return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n      if (!config.toastComponent) {\n        throw new Error('toastComponent required');\n      }\n      // max opened and auto dismiss = true\n      // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n      // a timeout at all\n      const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n      if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n        return duplicate;\n      }\n      this.previousToastMessage = message;\n      let keepInactive = false;\n      if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n        keepInactive = true;\n        if (this.toastrConfig.autoDismiss) {\n          this.clear(this.toasts[0].toastId);\n        }\n      }\n      const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n      this.index = this.index + 1;\n      let sanitizedMessage = message;\n      if (message && config.enableHtml) {\n        sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n      }\n      const toastRef = new ToastRef(overlayRef);\n      const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n      /** New injector that contains an instance of `ToastPackage`. */\n      const providers = [{\n        provide: ToastPackage,\n        useValue: toastPackage\n      }];\n      const toastInjector = Injector.create({\n        providers,\n        parent: this._injector\n      });\n      const component = new ComponentPortal(config.toastComponent, toastInjector);\n      const portal = overlayRef.attach(component, config.newestOnTop);\n      toastRef.componentInstance = portal.instance;\n      const ins = {\n        toastId: this.index,\n        title: title || '',\n        message: message || '',\n        toastRef,\n        onShown: toastRef.afterActivate(),\n        onHidden: toastRef.afterClosed(),\n        onTap: toastPackage.onTap(),\n        onAction: toastPackage.onAction(),\n        portal\n      };\n      if (!keepInactive) {\n        this.currentlyActive = this.currentlyActive + 1;\n        setTimeout(() => {\n          ins.toastRef.activate();\n        });\n      }\n      this.toasts.push(ins);\n      return ins;\n    }\n  }\n  _defineProperty(ToastrService, \"\\u0275fac\", function ToastrService_Factory(t) {\n    return new (t || ToastrService)(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i0.NgZone));\n  });\n  _defineProperty(ToastrService, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ToastrService,\n    factory: ToastrService.ɵfac,\n    providedIn: 'root'\n  }));\n  return ToastrService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet Toast = /*#__PURE__*/(() => {\n  class Toast {\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n      if (this.state.value === 'inactive') {\n        return 'none';\n      }\n      return;\n    }\n    constructor(toastrService, toastPackage, ngZone) {\n      _defineProperty(this, \"toastrService\", void 0);\n      _defineProperty(this, \"toastPackage\", void 0);\n      _defineProperty(this, \"ngZone\", void 0);\n      _defineProperty(this, \"message\", void 0);\n      _defineProperty(this, \"title\", void 0);\n      _defineProperty(this, \"options\", void 0);\n      _defineProperty(this, \"duplicatesCount\", void 0);\n      _defineProperty(this, \"originalTimeout\", void 0);\n      /** width of progress bar */\n      _defineProperty(this, \"width\", -1);\n      /** a combination of toast type and options.toastClass */\n      _defineProperty(this, \"toastClasses\", '');\n      /** controls animation */\n      _defineProperty(this, \"state\", void 0);\n      _defineProperty(this, \"timeout\", void 0);\n      _defineProperty(this, \"intervalId\", void 0);\n      _defineProperty(this, \"hideTime\", void 0);\n      _defineProperty(this, \"sub\", void 0);\n      _defineProperty(this, \"sub1\", void 0);\n      _defineProperty(this, \"sub2\", void 0);\n      _defineProperty(this, \"sub3\", void 0);\n      this.toastrService = toastrService;\n      this.toastPackage = toastPackage;\n      this.ngZone = ngZone;\n      this.message = toastPackage.message;\n      this.title = toastPackage.title;\n      this.options = toastPackage.config;\n      this.originalTimeout = toastPackage.config.timeOut;\n      this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n      this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n        this.activateToast();\n      });\n      this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n        this.remove();\n      });\n      this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n        this.resetTimeout();\n      });\n      this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n        this.duplicatesCount = count;\n      });\n      this.state = {\n        value: 'inactive',\n        params: {\n          easeTime: this.toastPackage.config.easeTime,\n          easing: 'ease-in'\n        }\n      };\n    }\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n      this.sub1.unsubscribe();\n      this.sub2.unsubscribe();\n      this.sub3.unsubscribe();\n      clearInterval(this.intervalId);\n      clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n      this.state = {\n        ...this.state,\n        value: 'active'\n      };\n      if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n        this.outsideTimeout(() => this.remove(), this.options.timeOut);\n        this.hideTime = new Date().getTime() + this.options.timeOut;\n        if (this.options.progressBar) {\n          this.outsideInterval(() => this.updateProgress(), 10);\n        }\n      }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n      if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n        return;\n      }\n      const now = new Date().getTime();\n      const remaining = this.hideTime - now;\n      this.width = remaining / this.options.timeOut * 100;\n      if (this.options.progressAnimation === 'increasing') {\n        this.width = 100 - this.width;\n      }\n      if (this.width <= 0) {\n        this.width = 0;\n      }\n      if (this.width >= 100) {\n        this.width = 100;\n      }\n    }\n    resetTimeout() {\n      clearTimeout(this.timeout);\n      clearInterval(this.intervalId);\n      this.state = {\n        ...this.state,\n        value: 'active'\n      };\n      this.outsideTimeout(() => this.remove(), this.originalTimeout);\n      this.options.timeOut = this.originalTimeout;\n      this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n      this.width = -1;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n      if (this.state.value === 'removed') {\n        return;\n      }\n      clearTimeout(this.timeout);\n      this.state = {\n        ...this.state,\n        value: 'removed'\n      };\n      this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n      if (this.state.value === 'removed') {\n        return;\n      }\n      this.toastPackage.triggerTap();\n      if (this.options.tapToDismiss) {\n        this.remove();\n      }\n    }\n    stickAround() {\n      if (this.state.value === 'removed') {\n        return;\n      }\n      if (this.options.disableTimeOut !== 'extendedTimeOut') {\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n      }\n    }\n    delayedHideToast() {\n      if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state.value === 'removed') {\n        return;\n      }\n      this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n      this.options.timeOut = this.options.extendedTimeOut;\n      this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n      this.width = -1;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n    outsideTimeout(func, timeout) {\n      if (this.ngZone) {\n        this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n      } else {\n        this.timeout = setTimeout(() => func(), timeout);\n      }\n    }\n    outsideInterval(func, timeout) {\n      if (this.ngZone) {\n        this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n      } else {\n        this.intervalId = setInterval(() => func(), timeout);\n      }\n    }\n    runInsideAngular(func) {\n      if (this.ngZone) {\n        this.ngZone.run(() => func());\n      } else {\n        func();\n      }\n    }\n  }\n  _defineProperty(Toast, \"\\u0275fac\", function Toast_Factory(t) {\n    return new (t || Toast)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.NgZone));\n  });\n  _defineProperty(Toast, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Toast,\n    selectors: [[\"\", \"toast-component\", \"\"]],\n    hostVars: 5,\n    hostBindings: function Toast_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function Toast_click_HostBindingHandler() {\n          return ctx.tapToast();\n        })(\"mouseenter\", function Toast_mouseenter_HostBindingHandler() {\n          return ctx.stickAround();\n        })(\"mouseleave\", function Toast_mouseleave_HostBindingHandler() {\n          return ctx.delayedHideToast();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@flyInOut\", ctx.state);\n        i0.ɵɵclassMap(ctx.toastClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    attrs: _c0,\n    decls: 5,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n    template: function Toast_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, Toast_button_0_Template, 3, 0, \"button\", 0);\n        i0.ɵɵtemplate(1, Toast_div_1_Template, 3, 5, \"div\", 1);\n        i0.ɵɵtemplate(2, Toast_div_2_Template, 1, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, Toast_div_3_Template, 2, 4, \"div\", 3);\n        i0.ɵɵtemplate(4, Toast_div_4_Template, 2, 2, \"div\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n      }\n    },\n    dependencies: [NgIf],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])]\n    }\n  }));\n  return Toast;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DefaultGlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nconst provideToastr = (config = {}) => {\n  const providers = [{\n    provide: TOAST_CONFIG,\n    useValue: {\n      default: DefaultGlobalConfig,\n      config\n    }\n  }];\n  return makeEnvironmentProviders(providers);\n};\nlet ToastrModule = /*#__PURE__*/(() => {\n  class ToastrModule {\n    static forRoot(config = {}) {\n      return {\n        ngModule: ToastrModule,\n        providers: [provideToastr(config)]\n      };\n    }\n  }\n  _defineProperty(ToastrModule, \"\\u0275fac\", function ToastrModule_Factory(t) {\n    return new (t || ToastrModule)();\n  });\n  _defineProperty(ToastrModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrModule\n  }));\n  _defineProperty(ToastrModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n  return ToastrModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToastrComponentlessModule = /*#__PURE__*/(() => {\n  class ToastrComponentlessModule {\n    static forRoot(config = {}) {\n      return {\n        ngModule: ToastrModule,\n        providers: [{\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoComponentGlobalConfig,\n            config\n          }\n        }]\n      };\n    }\n  }\n  _defineProperty(ToastrComponentlessModule, \"\\u0275fac\", function ToastrComponentlessModule_Factory(t) {\n    return new (t || ToastrComponentlessModule)();\n  });\n  _defineProperty(ToastrComponentlessModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastrComponentlessModule\n  }));\n  _defineProperty(ToastrComponentlessModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n  return ToastrComponentlessModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToastNoAnimation = /*#__PURE__*/(() => {\n  class ToastNoAnimation {\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n      if (this.state === 'inactive') {\n        return 'none';\n      }\n    }\n    /** controls animation */\n\n    constructor(toastrService, toastPackage, appRef) {\n      _defineProperty(this, \"toastrService\", void 0);\n      _defineProperty(this, \"toastPackage\", void 0);\n      _defineProperty(this, \"appRef\", void 0);\n      _defineProperty(this, \"message\", void 0);\n      _defineProperty(this, \"title\", void 0);\n      _defineProperty(this, \"options\", void 0);\n      _defineProperty(this, \"duplicatesCount\", void 0);\n      _defineProperty(this, \"originalTimeout\", void 0);\n      /** width of progress bar */\n      _defineProperty(this, \"width\", -1);\n      /** a combination of toast type and options.toastClass */\n      _defineProperty(this, \"toastClasses\", '');\n      _defineProperty(this, \"state\", 'inactive');\n      _defineProperty(this, \"timeout\", void 0);\n      _defineProperty(this, \"intervalId\", void 0);\n      _defineProperty(this, \"hideTime\", void 0);\n      _defineProperty(this, \"sub\", void 0);\n      _defineProperty(this, \"sub1\", void 0);\n      _defineProperty(this, \"sub2\", void 0);\n      _defineProperty(this, \"sub3\", void 0);\n      this.toastrService = toastrService;\n      this.toastPackage = toastPackage;\n      this.appRef = appRef;\n      this.message = toastPackage.message;\n      this.title = toastPackage.title;\n      this.options = toastPackage.config;\n      this.originalTimeout = toastPackage.config.timeOut;\n      this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n      this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n        this.activateToast();\n      });\n      this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n        this.remove();\n      });\n      this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n        this.resetTimeout();\n      });\n      this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n        this.duplicatesCount = count;\n      });\n    }\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n      this.sub1.unsubscribe();\n      this.sub2.unsubscribe();\n      this.sub3.unsubscribe();\n      clearInterval(this.intervalId);\n      clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n      this.state = 'active';\n      if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n        this.timeout = setTimeout(() => {\n          this.remove();\n        }, this.options.timeOut);\n        this.hideTime = new Date().getTime() + this.options.timeOut;\n        if (this.options.progressBar) {\n          this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n      }\n      if (this.options.onActivateTick) {\n        this.appRef.tick();\n      }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n      if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n        return;\n      }\n      const now = new Date().getTime();\n      const remaining = this.hideTime - now;\n      this.width = remaining / this.options.timeOut * 100;\n      if (this.options.progressAnimation === 'increasing') {\n        this.width = 100 - this.width;\n      }\n      if (this.width <= 0) {\n        this.width = 0;\n      }\n      if (this.width >= 100) {\n        this.width = 100;\n      }\n    }\n    resetTimeout() {\n      clearTimeout(this.timeout);\n      clearInterval(this.intervalId);\n      this.state = 'active';\n      this.options.timeOut = this.originalTimeout;\n      this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n      this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n      this.width = -1;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n      if (this.state === 'removed') {\n        return;\n      }\n      clearTimeout(this.timeout);\n      this.state = 'removed';\n      this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n      if (this.state === 'removed') {\n        return;\n      }\n      this.toastPackage.triggerTap();\n      if (this.options.tapToDismiss) {\n        this.remove();\n      }\n    }\n    stickAround() {\n      if (this.state === 'removed') {\n        return;\n      }\n      clearTimeout(this.timeout);\n      this.options.timeOut = 0;\n      this.hideTime = 0;\n      // disable progressBar\n      clearInterval(this.intervalId);\n      this.width = 0;\n    }\n    delayedHideToast() {\n      if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state === 'removed') {\n        return;\n      }\n      this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n      this.options.timeOut = this.options.extendedTimeOut;\n      this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n      this.width = -1;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  _defineProperty(ToastNoAnimation, \"\\u0275fac\", function ToastNoAnimation_Factory(t) {\n    return new (t || ToastNoAnimation)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  });\n  _defineProperty(ToastNoAnimation, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToastNoAnimation,\n    selectors: [[\"\", \"toast-component\", \"\"]],\n    hostVars: 4,\n    hostBindings: function ToastNoAnimation_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ToastNoAnimation_click_HostBindingHandler() {\n          return ctx.tapToast();\n        })(\"mouseenter\", function ToastNoAnimation_mouseenter_HostBindingHandler() {\n          return ctx.stickAround();\n        })(\"mouseleave\", function ToastNoAnimation_mouseleave_HostBindingHandler() {\n          return ctx.delayedHideToast();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.toastClasses);\n        i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n      }\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    attrs: _c0,\n    decls: 5,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n    template: function ToastNoAnimation_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ToastNoAnimation_button_0_Template, 3, 0, \"button\", 0);\n        i0.ɵɵtemplate(1, ToastNoAnimation_div_1_Template, 3, 5, \"div\", 1);\n        i0.ɵɵtemplate(2, ToastNoAnimation_div_2_Template, 1, 3, \"div\", 2);\n        i0.ɵɵtemplate(3, ToastNoAnimation_div_3_Template, 2, 4, \"div\", 3);\n        i0.ɵɵtemplate(4, ToastNoAnimation_div_4_Template, 2, 2, \"div\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n      }\n    },\n    dependencies: [NgIf],\n    encapsulation: 2\n  }));\n  return ToastNoAnimation;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DefaultNoAnimationsGlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation\n};\nlet ToastNoAnimationModule = /*#__PURE__*/(() => {\n  class ToastNoAnimationModule {\n    static forRoot(config = {}) {\n      return {\n        ngModule: ToastNoAnimationModule,\n        providers: [{\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoAnimationsGlobalConfig,\n            config\n          }\n        }]\n      };\n    }\n  }\n  _defineProperty(ToastNoAnimationModule, \"\\u0275fac\", function ToastNoAnimationModule_Factory(t) {\n    return new (t || ToastNoAnimationModule)();\n  });\n  _defineProperty(ToastNoAnimationModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ToastNoAnimationModule\n  }));\n  _defineProperty(ToastNoAnimationModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n  return ToastNoAnimationModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };\n//# sourceMappingURL=ngx-toastr.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}